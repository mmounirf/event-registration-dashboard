{"version":3,"sources":["config/firebase.js","components/QRCode.js","components/GuestsList.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","QRCode","cellData","url","value","className","href","rel","target","downlaod","width","src","alt","GuestsList","props","useState","guests","setGuests","fileInput","React","createRef","useEffect","collection","onSnapshot","snapshot","docs","map","doc","qrCode","id","data","importGuestList","e","current","click","parseFile","base64","split","xlsx","XLSX","read","importToFirestore","utils","sheet_to_json","Sheets","Sheet1","dataToImport","guest","name","Object","values","type","batchTransaction","batch","forEach","record","docRef","set","commit","ref","onChange","reader","FileReader","readAsDataURL","files","onload","resolve","result","onerror","error","reject","dataSource","showBorders","onToolbarPreparing","toolbarOptions","items","unshift","location","widget","options","icon","text","onClick","bind","visible","defaultPageSize","showPageSizeSelector","allowedPageSizes","showInfo","enabled","fileName","allowExportSelectedData","dataField","caption","cellRender","dataType","calculateCellValue","date","Date","seconds","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ydAWMA,E,OAVcC,EAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,0CACZC,YAAa,iDACbC,UAAW,0BACXC,cAAe,sCACfC,kBAAmB,eACnBC,MAAO,8CAGcC,YCIRC,EAZA,SAACC,GACZ,IAAIC,EAAG,wEAAoED,EAASE,OACpF,OACI,yBAAKC,UAAU,eACX,uBAAGC,KAAMH,EAAKI,IAAI,sBAAsBC,OAAO,SAASC,SAAS,QAC7D,yBAAKC,MAAM,KAAKC,IAAKR,EAAKS,IAAI,c,uPCE9C,IA4FeC,EA5FI,SAACC,GAAW,IAAD,EACAC,qBADA,mBACrBC,EADqB,KACbC,EADa,KAEtBC,EAAYC,IAAMC,YACxBC,oBAAU,WACR/B,EAAGgC,WAAW,UAAUC,WAAW,SAAAC,GAC/BP,EAAUO,EAASC,KAAKC,IAAI,SAAAC,GACxB,O,qVAAO,CAAP,CACIC,OAAQD,EAAIE,IACTF,EAAIG,cAIlB,IAEH,IAqBMC,EAAkB,SAACC,GACvBd,EAAUe,QAAQC,SAUdC,EAAY,SAACL,GACjB,IAAMM,EAASN,EAAKO,MAAM,KAAK,GACzBC,EAAQC,IAAKC,KAAKJ,GAExB,OADAK,EAAkBF,IAAKG,MAAMC,cAAcL,EAAKM,OAAOC,UAChD,GAGHJ,EAAoB,SAACzB,GACzB,IAAM8B,EAAY,YAAO9B,EAAOU,IAAI,SAACqB,GACjC,MAAO,CACHC,KAAMC,OAAOC,OAAOH,GAAO,GAC3BI,KAAMF,OAAOC,OAAOH,GAAO,IAAM,OAGrCK,EAAmB9D,EAAG+D,QAC1BP,EAAaQ,QAAQ,SAACC,GAClB,IAAMC,EAASlE,EAAGgC,WAAW,UAAUK,MACvCyB,EAAiBK,IAAID,EAAQD,KAEjCH,EAAiBM,UAGnB,OAAO1C,EACL,yBAAKX,UAAU,mBACf,2BAAOwB,GAAG,YAAY8B,IAAKzC,EAAW0C,SA/BnB,SAAC5B,GACpB,IAAM6B,EAAS,IAAIC,WACnBD,EAAOE,cAAc/B,EAAExB,OAAOwD,MAAM,IACpCH,EAAOI,OAAS,kBAAMC,kBAAQ/B,EAAU0B,EAAOM,UAC/CN,EAAOO,QAAU,SAAAC,GAAK,OAAIC,iBAAOD,KA2B6BlB,KAAK,SACjE,kBAAC,IAAD,CACEoB,WAAYvD,EACZwD,aAAa,EACbC,mBArDqB,SAACzC,GAC1BA,EAAE0C,eAAeC,MAAMC,QACnB,CACIC,SAAU,QACVC,OAAQ,WACRC,QAAS,CACLC,KAAM,WACNC,KAAM,oBACNC,QAASnD,EAAgBoD,U,QA8CjC,kBAAC,YAAD,CAAWC,SAAS,IACpB,kBAAC,eAAD,CAAcA,SAAS,IACvB,kBAAC,SAAD,CAAQC,gBAAiB,KACzB,kBAAC,QAAD,CACEC,sBAAsB,EACtBC,iBAAkB,CAAC,EAAG,GAAI,IAC1BC,UAAU,IACZ,kBAAC,SAAD,CAAQC,SAAS,EAAMC,SAAU,YAAaC,yBAAyB,IACvE,kBAAC,SAAD,CAAQC,UAAU,SAASC,QAAQ,UAAUC,WAAY7F,IACzD,kBAAC,SAAD,CAAQ2F,UAAU,OAAOC,QAAQ,SACjC,kBAAC,SAAD,CAAQD,UAAU,OAAOC,QAAQ,SACjC,kBAAC,SAAD,CAAQD,UAAU,OAAOC,QAAQ,OAAOE,SAAS,WAAWC,mBAxE/C,SAAC9F,GAChB,GAAIA,EAAS+F,KACX,OAAO,IAAIC,KAA6B,IAAxBhG,EAAS+F,KAAKE,cAyE/B,0CCrFQC,EARH,WACV,OACE,yBAAK/F,UAAU,OACb,kBAAC,EAAD,QCGcgG,QACW,cAA7BC,OAAOzB,SAAS0B,UAEe,UAA7BD,OAAOzB,SAAS0B,UAEhBD,OAAOzB,SAAS0B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.871eb7bc.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyBT2ZvXK3Gb8gaSe9hRYFHebVt8h-2MZyE\",\r\n  authDomain: \"peanuts-qr-registration.firebaseapp.com\",\r\n  databaseURL: \"https://peanuts-qr-registration.firebaseio.com\",\r\n  projectId: \"peanuts-qr-registration\",\r\n  storageBucket: \"peanuts-qr-registration.appspot.com\",\r\n  messagingSenderId: \"974983116192\",\r\n  appId: \"1:974983116192:web:3a2a06224afc3ced38e0c5\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport { db };\r\n\r\n  \r\n","import React from 'react';\r\n\r\n\r\nconst QRCode = (cellData) => {\r\n    let url = `https://api.qrserver.com/v1/create-qr-code/?size=500x500&data=${cellData.value}`;\r\n    return (\r\n        <div className=\"qrContainer\">\r\n            <a href={url} rel=\"noopener noreferrer\" target=\"_blank\" downlaod=\"true\">\r\n                <img width='50' src={url} alt='qrCode' />\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default QRCode","import React, { useState, useEffect } from 'react';\r\nimport DataGrid, { Column, FilterRow, HeaderFilter, Export, Paging, Pager } from 'devextreme-react/data-grid';\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.material.orange.dark.css';\r\nimport { db } from '../config/firebase';\r\nimport QRCode from './QRCode';\r\nimport XLSX from 'xlsx';\r\nimport { resolve, reject } from 'q';\r\n\r\n\r\nconst GuestsList = (props) => {\r\n  const [guests, setGuests] = useState();\r\n  const fileInput = React.createRef();\r\n  useEffect(() => {\r\n    db.collection('guests').onSnapshot(snapshot => {\r\n        setGuests(snapshot.docs.map(doc => {\r\n            return {\r\n                qrCode: doc.id,\r\n                ...doc.data()\r\n            }\r\n        }))\r\n    })\r\n  }, []);\r\n\r\n  const formatTime = (cellData) => {\r\n      if (cellData.date) {\r\n        return new Date(cellData.date.seconds * 1000);\r\n      }\r\n      return;\r\n  }\r\n\r\n  const onToolbarPreparing = (e) => {\r\n    e.toolbarOptions.items.unshift(\r\n        {\r\n            location: 'after',\r\n            widget: 'dxButton',\r\n            options: {\r\n                icon: 'download',\r\n                text: 'Import Guest List',\r\n                onClick: importGuestList.bind(this)\r\n            }\r\n        }\r\n    );\r\n  }\r\n\r\n  const importGuestList = (e) => {\r\n    fileInput.current.click();\r\n  }\r\n  \r\n  const onFileSelect = (e) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(e.target.files[0]);\r\n    reader.onload = () => resolve(parseFile(reader.result));\r\n    reader.onerror = error => reject(error);\r\n  }\r\n\r\n  const parseFile = (data) => {\r\n    const base64 = data.split(',')[1];\r\n    const xlsx  = XLSX.read(base64);\r\n    importToFirestore(XLSX.utils.sheet_to_json(xlsx.Sheets.Sheet1));\r\n    return true;\r\n  }\r\n\r\n  const importToFirestore = (guests) => {\r\n    const dataToImport = [...guests.map((guest) => {\r\n        return {\r\n            name: Object.values(guest)[0],\r\n            type: Object.values(guest)[1] || ''\r\n        }\r\n    })];\r\n    let batchTransaction = db.batch();\r\n    dataToImport.forEach((record) => {\r\n        const docRef = db.collection('guests').doc();\r\n        batchTransaction.set(docRef, record);\r\n    });\r\n    batchTransaction.commit();\r\n  }\r\n\r\n  return guests ? (\r\n    <div className='guestsContainer'>\r\n    <input id=\"fileInput\" ref={fileInput} onChange={onFileSelect} type=\"file\" />\r\n      <DataGrid\r\n        dataSource={guests}\r\n        showBorders={true}\r\n        onToolbarPreparing={onToolbarPreparing}>\r\n        <FilterRow visible={true} />\r\n        <HeaderFilter visible={true} />\r\n        <Paging defaultPageSize={10} />\r\n        <Pager\r\n          showPageSizeSelector={true}\r\n          allowedPageSizes={[5, 10, 20]}\r\n          showInfo={true} />\r\n        <Export enabled={true} fileName={'Employees'} allowExportSelectedData={true} />\r\n        <Column dataField='qrCode' caption='QR Code' cellRender={QRCode} />\r\n        <Column dataField='name' caption='Name' />\r\n        <Column dataField='type' caption='Type' />\r\n        <Column dataField='date' caption='Date' dataType='datetime' calculateCellValue={formatTime} />\r\n      </DataGrid>\r\n    </div>\r\n  ) : (<p>Loading...</p>)\r\n};\r\n\r\nexport default GuestsList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.material.orange.dark.css';\r\nimport GuestsList from './components/GuestsList';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <GuestsList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}