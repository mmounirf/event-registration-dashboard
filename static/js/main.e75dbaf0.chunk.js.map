{"version":3,"sources":["config/firebase.js","components/QRCode.js","components/GuestsList.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","QRCode","cellData","url","value","className","href","rel","target","downlaod","width","src","alt","GuestsList","props","useState","guests","setGuests","fileInput","React","createRef","useEffect","collection","onSnapshot","snapshot","docs","map","doc","qrCode","id","data","importGuestList","e","current","click","parseFile","base64","split","xlsx","XLSX","read","importToFirestore","utils","sheet_to_json","Sheets","Sheet1","dataToImport","guest","name","employer","type","batchTransaction","batch","forEach","record","docRef","set","commit","ref","onChange","reader","FileReader","readAsDataURL","files","onload","resolve","result","onerror","error","reject","dataSource","showBorders","onToolbarPreparing","toolbarOptions","items","unshift","location","widget","options","icon","text","onClick","bind","visible","defaultPageSize","showPageSizeSelector","allowedPageSizes","showInfo","enabled","fileName","allowExportSelectedData","dataField","caption","cellRender","dataType","calculateCellValue","date","Date","seconds","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e75dbaf0.chunk.js","sourcesContent":["import firebase from \"firebase\";\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyBDv8bgatDxxsGVGMOm5mo55r8q7xB0iP4\",\n  authDomain: \"flutter-firebase-184f7.firebaseapp.com\",\n  databaseURL: \"https://flutter-firebase-184f7.firebaseio.com\",\n  projectId: \"flutter-firebase-184f7\",\n  storageBucket: \"flutter-firebase-184f7.appspot.com\",\n  messagingSenderId: \"641245303626\",\n  appId: \"1:641245303626:web:b467f044a6e450566ce7b3\"\n});\n\nconst db = firebaseApp.firestore();\n\nexport { db };\n\n  \n","import React from 'react';\n\n\nconst QRCode = (cellData) => {\n    let url = `https://api.qrserver.com/v1/create-qr-code/?size=500x500&data=${cellData.value}`;\n    return (\n        <div className=\"qrContainer\">\n            <a href={url} rel=\"noopener noreferrer\" target=\"_blank\" downlaod=\"true\">\n                <img width='50' src={url} alt='qrCode' />\n            </a>\n        </div>\n    )\n}\n\n\nexport default QRCode","import React, { useState, useEffect } from 'react';\nimport DataGrid, { Column, FilterRow, HeaderFilter, Export, Paging, Pager } from 'devextreme-react/data-grid';\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.material.orange.dark.css';\nimport { db } from '../config/firebase';\nimport QRCode from './QRCode';\nimport XLSX from 'xlsx';\nimport { resolve, reject } from 'q';\n\n\nconst GuestsList = (props) => {\n  const [guests, setGuests] = useState();\n  const fileInput = React.createRef();\n  useEffect(() => {\n    db.collection('guests').onSnapshot(snapshot => {\n        setGuests(snapshot.docs.map(doc => {\n            return {\n                qrCode: doc.id,\n                ...doc.data()\n            }\n        }))\n    })\n  }, []);\n\n  const formatTime = (cellData) => {\n      if (cellData.date) {\n        return new Date(cellData.date.seconds * 1000);\n      }\n      return;\n  }\n\n  const onToolbarPreparing = (e) => {\n    e.toolbarOptions.items.unshift(\n        {\n            location: 'after',\n            widget: 'dxButton',\n            options: {\n                icon: 'download',\n                text: 'Import Guest List',\n                onClick: importGuestList.bind(this)\n            }\n        }\n    );\n  }\n\n  const importGuestList = (e) => {\n    fileInput.current.click();\n  }\n  \n  const onFileSelect = (e) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(e.target.files[0]);\n    reader.onload = () => resolve(parseFile(reader.result));\n    reader.onerror = error => reject(error);\n  }\n\n  const parseFile = (data) => {\n    const base64 = data.split(',')[1];\n    const xlsx  = XLSX.read(base64);\n    importToFirestore(XLSX.utils.sheet_to_json(xlsx.Sheets.Sheet1));\n    return true;\n  }\n\n  const importToFirestore = (guests) => {\n    const dataToImport = [...guests.map((guest) => {\n        return {\n            name: `${guest['First Name']} ${guest['Last Name']}`,\n            employer: guest['Employer'],\n            type:guest['Attendee Type']\n        }\n    })];\n    let batchTransaction = db.batch();\n    dataToImport.forEach((record) => {\n        const docRef = db.collection('guests').doc();\n        batchTransaction.set(docRef, record);\n    });\n    batchTransaction.commit();\n  }\n\n  return guests ? (\n    <div className='guestsContainer'>\n    <input id=\"fileInput\" ref={fileInput} onChange={onFileSelect} type=\"file\" />\n      <DataGrid\n        dataSource={guests}\n        showBorders={true}\n        onToolbarPreparing={onToolbarPreparing}>\n        <FilterRow visible={true} />\n        <HeaderFilter visible={true} />\n        <Paging defaultPageSize={10} />\n        <Pager\n          showPageSizeSelector={true}\n          allowedPageSizes={[5, 10, 20]}\n          showInfo={true} />\n        <Export enabled={true} fileName={'Employees'} allowExportSelectedData={true} />\n        <Column dataField='qrCode' caption='QR Code' cellRender={QRCode} />\n        <Column dataField='name' caption='Name' />\n        <Column dataField='employer' caption='Employer' />\n        <Column dataField='type' caption='Attendee Type' />\n        <Column dataField='date' caption='Date' dataType='datetime' calculateCellValue={formatTime} />\n      </DataGrid>\n    </div>\n  ) : (<p>Loading...</p>)\n};\n\nexport default GuestsList;\n","import React from 'react';\nimport './App.css';\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.material.orange.dark.css';\nimport GuestsList from './components/GuestsList';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <GuestsList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}